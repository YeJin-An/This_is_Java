1. 소프트웨어와 소프트웨어공학

소프트웨어의 특징
소프트웨어 개발의 특징

소프트웨어 공학이란?
-> 탄생 -> 필요성 -> 범위

강의 내용
-> 소프트웨어
-> 소프트웨어 개발
-> 소프트웨어 공학


1. 소프트웨어는 모든 곳에 사용된다
   -> PC, 노트북, PDA, 가전제품, 건물, 항공기, Mobile


---------------------------------------------------------------------------

소프트웨어란?

프레스만(Pressman)의 정의
-> 자신을 하고자하는 [기능or성능]을 실행하기 위한 명령어(컴퓨터 프로그램)
-> 정보들을 가공하여 프로그램을 구동시키는 자료구조
-> 프로그램의 사용과 동작을 설명한 문서들

용도에 따른 소프트웨어의 구분
1. 응용 소프트웨어
-> 개인용 컴퓨터에서 흔히 접하는 소프트웨어
-> 사용자가 원하는 목적에 맞게 개발된 소프트웨어
EX> Word Processor, Spread Sheet, Spread Sheet, Browser
2. 시스템 소프트웨어
-> 하드웨어를 관리하고 응용 소프트웨어를 지원하는 소프트웨어
EX> Operating system, 네트워크 관리 프로그램 등...

-------------------------------------------------------------------------------

소프트웨어의 특징

소프트웨어의 비가시성(Invisibility)
-> 소프트웨어 완제품의 구조가 개발된 코드 안에 숨어 있어 파악하기 힘든 특징

프레스만(Pressman)이 정의한 소프트웨어의 특징
-> 소프트웨어는 고전적인 의미의 '제조(Manufacture)' 가 아닌
                                          '개발(Development)'이라는 것이다.
-> 소프트웨어는 닳지 않지만, 
    요구사항의 변경과 주변환경의 변화에 따라 수정되고 진화한다.

------------------------------------------------------------------------------

소프트웨어의 특성으로 인한 개발의 어려움

소프트웨어는
    - 물리적인 형태가 없는 무형의 논리적인 요소
       -> 개발 진행 상황과 개발 과정에 대해 정확하게 이해하기 어려움
    - 최종 산출물이 개발 과정에서 확인되지 않음
       -> 오류를 발견해야할 실기를 놓치거나, 해결책을 못 찾는 경우가 발생
    - 프로젝트의 지연 및 예상 범위 초과로 인한 프로젝트 실패 가능성이 높음

2001년 미국 소프트웨어 프로젝트 결과
-> 취소 29% , 일정 준수 : 26% , 101~200% 지연:26%
    51 ~ 100 % 지연 : 8% , 21 ~ 50% 지연 : 8%
    20% 이하 지연 : 8% , 200% 이상 지연 : 6%

------------------------------------------------------------------------------

소프트웨어 개발[1/2]
1. 고객의 요구 -> 요구사항 분석 -> 설계 -> 구현 -> 테스팅 -> S/W 제품

소프트웨어 개발에 연관된 역할들[1/2]
1. 고객
-> 개발자에게 비용을 준다.
-> 개발자로 부터 [소프트웨어/개발, 데드라인, 유지보수]를 받는다.
2. 개발자
-> 사용자에게 소프트웨어와 시스템을 준다.
-> 사용자로 부터 요구사항을 받는다.
3. 사용자

소프트웨어 개발에 연관된 역할들 [2/2]
1. 고객(Customer)
-> 소프트웨어의 개발 필요성을 결정
-> 사업적 타당성을 판단하고,
    개발자에게 소프트웨어 시스템 개발 의로, 개발비 제공
2. 사용자(User)
-> 소프트웨어 시스템에 대해 개발자에게 요구사항을 제공
-> 고객이 사용자의 역할을 같이 할 수도 있다.
-> 다양한 사용자가 존재하는 소프트웨어의 경우
    (사용자의 사용 패턴을 이해하고, 요구사항을 이끌어내는 것이 매우 중요)
3. 개발자(Developer)
-> 고객과의 계약으로 시간 및 비용내에서 
    사용자의 요구사항을 기반으로 소프트웨어 시스템을 개발하는 역할
-> 1명, or 팀을 구성하여 작업

{개발자에 따라 달라지는 구현 형태}
-> 사람에 따라 구현 형태가 달라집니다!!

----------------------------------------------------------------------------------

{ 소프트웨어 공학이란? -> 탄생 -> 필요성 -> 범위 }

과거의 소프트웨어 개발
-> 소프트웨어 프로그래밍 = 예술
    - 개발자에 다라 다양하 방식이 존재
    - 사용자 = 프로그래머 = 유지보수 담당자

체계적 방법의 부재
-> 정형적인 방법론이 거의없고, 
    그것을 사용할 수 있는 사람도 거의없음.
-> 프로그래머는 시행착오에 의해 기술을 습득 함.

대규모 프로젝트의 어려움
1. 수백 명의 개발자            - 의사소통 및 협력의 어려움  - 조직 및 팀 구조
2. 오랜 개발 시간               - 프로젝트 관리                 - 비용 및 효과의 산정
3. 모호하고 복잡한 요구사항  - 수백 페이지의 요구사항     - 빈번한 요구사항의 변화

소프트웨어 공학의 대두 배경
1. 소프트웨어 위기           - 소프트웨어 수요 증가에 비해 공급 및 개발의 어려움
2. 소프트웨어 위기의 해결  - 다른 분야에서 사용했던 공학(Enginnering)패러다임을 이용하자는 결론

--------------------------------------------------------------------------------------

소프트웨어 공학이란?
정의 -> 소프트웨어의 개발, 운용, 유지보수 및 폐기에 대한 체계적인 접근 방법
특징 -> 소프트웨어 전 과정에 걸쳐 필요한 [이론, 개념 및 기술]을 다룸.
      -> 소프트웨어 개발 과정에서 생성되는 [모든 산출물]이 그 대상이 됨.
목표 -> 소프트웨어 개발이 체계적or공학적인 방법으로 
           추정된 비용과 기간에 고객이 원하는 품질 높은 소프트웨어를 개발하는 것.

과학, 공학, 예술의 차이
1. 과학 (수식)
2. 공학 (기계)
3. 예술 (틀을 깨자!)

-----------------------------------------------------------------------------------------

공학이란?
-> 실제적 문자(Practical Problem)를 해결
-> 실제적인 산출물을 생산해내기 위해
-> 자원과 비용을 효과적으로 활용
-> 과학적 지식을 적용

공학과 소프트웨어 공학
- 공학
-> 업무분야에서 문제 발생 시, 적절한 해답을 찾을 수 있도록 체계적으로 정리된
    기술적 지식을 제공
- 소프트웨어 공학 
-> 소프트웨어 개발기술, 도구의 우수한 사례(Best Practice)을 정리하여
    누구나 당면한 문제를 해결할 수 있도록 체계적인 기술적 지식 제공.

소프트웨어 공학의 주요 영역들
-> 프로세스, 아키텍처, 테스트, 관리, 개발도구, 유지보수


소프트웨어 공학의 영역들[3/3]
1. 요구공학(Requirement Enginerring)
2. 아키텍처 (Architecture)
3. 개발 방법론(Development Methodology)
4. 테스팅(Testing)
5. 프로세스(Process)
6. 형상 관리(Configuration Management)
7. 품질(Quality)
8. 재사용(Reuse)

































