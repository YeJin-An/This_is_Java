메모리 구조(Memory Structure)

전채적인 구조 나체는 위 사진과 같이
영역이 나뉜다.

Low address

Text
Data(정적변수, 전역변수)
Heap
Stack

High address

----------------------------------------------

Text
-> 코드를 실행하기 위해 
    저장되어있는 영역
  프로그램을 실행시키기 위해 구성되는 것
  들을 저장되는 영역
  제어문, 함수, 상수

Data
-> 우리가 작성한 코드에서 
    전역변수, 정적변수 등이 저장되는 공간
메인(main)함수전에 선언되어 
프로그램이 끝날 때 까지
메모리에 남아있는 변수들이라는 특징이 있음
초기화 된 변수 영역과
(initialized data segment) 
초기화되지 않는 변수 영역
(uninitalized data segment)

초기화 되지 않은 변수 영역은 
BBS(Block Started by Symbol)

Heap
-> '사용자에 의해 관리되는 영역'
-> 동적으로 할당 할 변수들이 여기에 저장
-> new연산자로 생성하는 경우 or Class
    참조 변수들도 Heap영역에 차지한다.
-> '낮은 주소에서 높은 주소로 할당(적재)


Stack
-> 함수를 호출 할 때 
    지역변수, 매개변수들이 저장되는 공간
-> main함수 안에서의 변수들도
    당연 이에 포함된다.
-> 함수가 종료되면 
    해당 함수에 할당된 변수들을
    메모리에서 해제시킵니다.
    Stack 자료구조의 pop과 같은 기능
-> StackOverFlow란
    재귀를 반복적으로 호출하면서
    Stack메모리 영역에 지역변수, 매개변수
    할당되다가 OS에서 할당해준 Stack
    영역의 메로리 영역을
     넘어버리면 발생하는 오류입니다.
-> Stack영역은 Heap영역과 반대로
    높은주소에서 낮은주소로
    메모리에할당됩니다.










