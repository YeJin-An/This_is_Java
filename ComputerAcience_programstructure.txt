컴퓨터 공학 개론 __ 프로그래밍 언어와 소프트웨어 공학

소스프로그램 -> 어휘분석기 
--(토큰)-> 구문 분석기 
--(구문 분석트리)-> 코드 생성기 
-> 목적 프로그램

---------------------------------------------------------------------------------------------
1. 프로그래밍 언어

1-1.역사적 고찰
-> 1세대 언어 '기계어'
-> 2세대 언어 '어셈블리 언어'
-> 3세대 언어 '프로그래밍 언어'
// 사람이 특성에 맞추어야 하는 환경에서 문제를 해결
   -> 컴퓨터가 사람의 특성에 맞추어진 환경헤서 문제를 해결
 
1-2. 언어의 구현 : 번역 과정
-> 소스 프로그램 : 원래 형태의 프로그램
-> 목적 프로그램 : 번역된 버전

	번역 과정 세가지
	1. 어휘 분석기 -> [소스 프로그램(단어)]토큰(token)을 표현하는 기호열을 인식하는 과정
	2. 구문 분석기 -> 토큰들을 문장으로 구문 다이어그램을 통해 구문 분석 트리를 생성
	3. 코드 생성기 -> 구문 분석기가 인식한 문장을 구현하기 위해 기계어 명령을 생성하는 단계

============================================================

1-3. 객체지향 프로그래밍

1. 객체(object) : 데이터와 [프로시저]를 포함하는 [능동적] 프로그램 단위
Q. 객체의 구성 요소?
-> 인스턴스 변수 ( instance variable )  : 객체 안에 들어있는 [변수]로 객체 내부의 {정보 저장}
-> 메서드 ( method )                      : 객체 안의 [함수(프로시저)]
-> 생성자 ( constructor )                  : 객체의 초기화에 사용되는 특별한 메서드
// 클래스( class ) --> OOP에서 객체들을 위한 틀 ( template )

2. 상속(inheritance)
-> 다른 특성을 갖는 객체들의 기술을 쉽게 사용할 수 있게 하는 것
-> 새로운 클래스 안에 정의 되어 있는 클래스를 사용하여 정의할 수 있음.
-> 객체 지향 언언들은 상속이라고 불리는 기법을 사용한다.

3. 다형성(polymorphism)
-> 객체의 내부 속석에 대한 접근을 제한하는 것
-> 객체의 어떤 속성이 캡슐화되어 있다는 것은 오직 객체 자체에서만 접근할 수 있다는 것
    이러한 속성을 전용( private ) 속성이라고 한다.
    반면 외부에서 접근이 가능한 속성은 공용( public ) 속성이라고 합니다.
4. 캡슐화(encapsulation)

============================================================

1-4. 병행활동 프로그래밍

1. 병렬(parallel) 또는 병행 ( concurrent )
-> 여러 프로세스를 동시에 실행하는 것
-> 각 활성화(프로세스)에 한 개씩 여러개의 CPU 코어가 필요하다!!
-> CPU가 하나만 있는 경우, 시분할 방식(단일 프로세서의 시간을 나누어 쓴다)을 이용.

2. 모니터 ( monitor )
-> 자신에 대한 접근 제어 능력을 갖춘 데이터 항목

Q. monitor가 왜 존재하는 것일까요?
우선 상호 배제(Mutual Exclusion)란 ? -> 한 번에 한 프로세스만이 데이터에 접근하는 것.
공유 데이터에 접근하는 각각의 프로그램의 단위는 (한번에 한 프로세스만 데이터에 접근하도록)
적절히 설계되어야 하는데, 
한 부분이라도 잘못 설계가 될 경우, 모두에세 피해(문제)가 발생(생김)합니다.
// 따라서 [데이터 항목 자제]가 스스로 접근 제어 능력을 가지는 것이 더 나은 해결책이고,
   이러한 능력을 가진 항목이 '모니터'라고 합니다.
-----------------------------------------------------------------------------------------------
2. 소프트웨어 공학
2-1. 소프트웨어 생명주기의 개발 단계
2-2. 소프트웨어 공학 방법론
2-3. 모듈화
--------------------------------------------------------------------------------------------------
3. 소프트웨어의 품질 보증
3-1. 유리박스 테스트
3-2. 블랙박스 테스트

https://velog.io/@ziva0312/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B3%B5%ED%95%99-%EA%B0%9C%EB%A1%A0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EC%99%80-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B3%B5%ED%95%99


