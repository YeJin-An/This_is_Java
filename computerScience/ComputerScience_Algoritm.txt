컴퓨터 공학 개론 __ 알고리즘에 관하여

---------------------------------------------------------------------------------
[ 개념 ]
알고리즘이란?
-> 어떤 문제를 해결하기 위한 절차. 
-> 명령어들의 집합.

알고리즘의 조건
1. 명확성 : "애매함이 없어야 한다."
2. 유한성 : "유한한 횟수로 문제를 해결하고 종료"
3. 효과성 : "유한한 시간 안에 정확하게 수행"
// 입출력 값의 존재 -> * 명확하게 한다는 것, 컴퓨터가 실해하기 위함!

알고리즘의 표현 방식
1. 의사코드(pseud-code)
2. 구현 내역
3. 그림

------------------------------------------------------------------------------

[ 발견 ]
polya 문제 해결의 4단계
1. 이해(문제 이해), 2. 계획(문제 해결의 계획 세우기), 
3. 실행,               4. 반성(결과와 과정을 재점감해보는 단계[문제해결 및 일반화])

polya의 문제 해걀 단계로 프로그램 개발하기

문제를 해결하는 여러 방법
-> 거꾸로 폴어보기
-> 더 쉬운 관련 문제를 해결해보기(제약 조건을 풀기, 상향식(botton up)방법론
-> 단계적 개선법(원래의 문제를 작은 문제로 나누기, 하향식(top-down)방법론)

-----------------------------------------------------------------------------------

[반복구조]__순환 방식으로 반복되는 일단의 명령
1. 순차 검색 알고리즘
-> 리스트 안에 특정한 값의 여부를 알기 위한 코드
-> 처음부터 끝까지 순차적으로 찾아 나가는 방식
2. 삽입 정렬 알고리즘
-> 오름차순(구현은 쉽지만, 경우에 따라 시간이 오래 걸린다.)
-> 내림차순(오름 차순보다 오래걸린다는 단점이 있다.)

-----------------------------------------------------------------------------------

[재귀 구조]__자기 자신을 호출하여 수행하는 것
1. 이진 탐색 알고리즘
-> 오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 알고리즘
-> 리스트 자체가 sorting(정렬)이 되어있다는 전재__Sortde List
// 처음 중간을 본다. 그리고 정답에 가까운 으로 가고 나머지는 버리는 형태

-----------------------------------------------------------------------------------

[효율성과 정확성]__알고리즘

1. 효율성__명령의 수로 측정
-> 최악 경우 분석(worst case analysis)
-> 최선 경우 분석(best case analysis)
-> 평균 경우 분석(average case analysis)

2. 정확성__소프트웨어 검증
-> 정형 논리를 이용하여 정확성에 대한 증명을 한다.

루프 불변 명제(loop invariant)
-> 알고리즘이 타당한지 확인하기 위해 사용되는 성질 중 하나

루프 불변성을 타당하기 위해 
1. 초기조건(Intialization) , 2. 유지 조건(Maintenance) , 3. 종료 조건(Termination)
-> 위 같은 예시로 프로그램을 돌려보며 맞는지 확인
-> 소프트웨어 검증에 많이 사용되는 방식이지만,
-> 테스트가 적용된 경우들 에서만 증명이 가능하다.

---------------------------------------------------------------------------


















