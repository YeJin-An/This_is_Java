컴퓨터 공학 개론 __ 데이터베이스 시스템

---------------------------------------------------------------------------------

1. 기본 데이터 구조

-> 리스트 ( List )
 : 시작 = head , 다른쪽 끝 = tail
 : List 항목들에 접근하는 방식을 제한함으로써
  스택과 큐라는 특별한 유형의 list가 2가지 있다.
--> 스택 ( stack )
 : stack of     head  = top
 : stack of     tail    = bottom
 : stack insert top   = push
 : stack delete       = pop
// stack == LIFO(Last-in, First-Out)
// 백트래킹 활동의 기초구조로 사용된다.

--> 큐 ( queue )
 : head 에서는 delete
 :   tail 에서는 insert  만 이루어지는 리스트 
// queue == FIFO(First-in, First-Out)  

-> 트리 ( tree )
 : tree 의 최상단      == Root Node
 : tree 의 최하단      == 단말 노드(terminal node, leaf node)
 : tree 의 최장 경로  == depth ( 최장 경로의 노드 개수 ) 
// child노드 , parent노드 , sibling노드
   2진트리(binary tree) -> 부모 노드가 둘 이하의 자식을 갖는 트리
// 서브트리는 무엇인가??

---------------------------------------------------------------------------------

2. 추상화, 정적 구조, 동적구조, 포인터

-> 추상화
 : 사용자가 실제 저장창지의(배열, 리스트, 스택, 큐)들을 
   신경쓰지 않고 편리한 형식으로 정보를 이용할 수 있게 해주는
   추상적 도구
 : 컴퓨터의 주기억장치는 (배열, 리스트, 스택, 큐)의 구조로 구성된 것이 아닌 
   주소를 지정할 수 있는 메모리의 셀로 구성되어있기 때문이다.

-> 정적 구조와 동적 구조
 : 추상적 데이터 구조를 구축할때, 
   그 구조가 정적인가 동적인가 하는 문제는 아주 중요합니다.
 : 왜냐하면 구조의 형태 및 크기에 따라 변화하는가의 여부이기 때문이다.

-> 포인터
 : 컴퓨터의 주기억장치의 cell은 숫자로 된 주소를 식별될 수 있다.
 : 주소들은 숫자이기 때문에 incoding 하여 메모리 셀에 저장할 수 있다.
// 포인터란? incoding된 주소를 값으로 갖는 메모리 영역이다.

---------------------------------------------------------------------------------

3. 데이터베이스의 기초

-> 스키마
 : 데이터베이스 소프트웨어가 데이터베이스를 유지하기 위해
   사용하는 전체 데이터베이스 구조에 대해 기술 한 것이다.

-> 데이터베이스 관리 시스템 DBMS
 : 데이터베이스에 대한 실제 조작이 이루어지는 곳

EX> 관계형 데이터베이스 모델
1. 데이터베이스 구조
-- 관계(Relation)  : 데이터를 사각형 테이블에 저장된 것_(테이블 지칭)
-- 튜플(Tuple)     : 관계 안의 한 행 (Column)
-- 속성(Attribute) : 관계 안의 열    (Row)
2. 관계연산 __ 실제 조작
-- select    : 특정 특성을 갖는 튜플을 선택 (관계에서 Column을 추출)
-- project  : Row들을 추출
-- join       : 여러 관계를 조합하여 한 관계를 만듦.
3. SQL(structed Query Language)
-- select, project, join등 연산 수행 루틴을 직접적으로 제공하기 보단,
   기본 단계를 조합하여 수행하는 루틴을 제공하는 것이다.
-- 관계의 구조 정의, 생성, 내용 수정 등을 위한 문장들을 포함한다
   ( insert into , delete from , update )
---------------------------------------------------------------------------------

4. 데이터베이스 무결성 유지

-> 커밋 / 롤백 프로토콜
 : 트랜잭션 과부하가 걸리는 database의 경우, 장비 오동작이 발생할 가능성이 높아진다.
 : 이를 방지하기위해 비휘발성 저장장치(ROM)에 {트랜잭션 활동}에 대한 [기록]을 포함한다.
   ( 로그(log) )를 유지하는 방법을 사용한다.

// 커밋 시점(commit point) -> 트랜잭션 안의 모든 단계들이 로그에 기록되는 시점
// 롤백(roll back) -> 커밋 시점에 이르기 전에 문제발생시 
                          실제 수행된 활동을 되돌리는데(roll back)사용될 수 있다.
                      -> 장비 오동작으로 인한 복구과정 뿐만 아닌 
                          정상적인 작업의 일부분으로 사용되기도 한다.

-> 로킹
 : 트랜잭션이 동시에 실행하는데, [합산 오류 문제]와 [갱신 유실 문제]를 들수 있다.
 : 이러한 현상을 [해결]하기 위해 사용되는 방법이다.
 : 데이터베이스 안의 [항목들을 표시하는 로킹 프로토콜](lokimng protocol)을 사용
  -> 데이터 베이스 안의 [항목을 표시들을 로크(lock)]라고 하고, 
      표시된 항목을 {로크 걸린 항목}이라 한다.
ex> 로킹(loking)                   : 한 트랜잭션이 사용 중인 데이터에 다른 [트랜잭션의 접근을 막는 것.]
     공유 로크(shared lock)      : 데이터를 읽을 때 사용.
     배타적 로크(exculsive lock) : 데이터를 변경할 때 사용. 

---------------------------------------------------------------------------------

5. 데이터 마이닝
 : 데이터베이스와 달리 사전에 알려져 있지 않는 패턴을 식별하는 것이 목적이다.
 : 운영데이터 베이스가 아닌 
   데이터 웨어하우스(data warehouse)라 불리는 정적인 데이터 집합에 대해 수행

-> 여러가지 데이터마이닝 기법
클래스 서술 (class description) : 어떤 데이터 항목 그룹을 특정짓는 성질을 식별한다.
클래스 차별화 (class discrimination) : 두 개의 그룹을 나누는 성질을 식별한다.
클러스터 분석 (cluster analysis) : 클래스 자체의 발견을 목적으로 한다.
연계성 분석 (association analysis) : 데이터 그룹 사이의 연결 링크를 찾는 것을 목적으로 한다.
이상치 분석 (outliter analysis) : 일반 기준을 벗어난 데이터 항목들의 식별을 목적으로 한다.
순차 패턴 분석 (sequential pattern analysis) : 시간의 경과에 따른 행위 패턴의 식별을 목적으로 한다.
데이터 큐브 (data cube) : 데이터 마이닝이 가능하도록 만드는 여러 관점에서 바라보는 데이터.
--> 이해가 되지 않습니다.
---------------------------------------------------------------------------------

















