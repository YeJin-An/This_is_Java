DS_DataStructure

Array를 이용한 List의 구현
--------------------------------------------------------------

리스트 자료구조는 
1.                   배열을 기반으로 구현된 리스트 '순차 리스트'
2. 메모리의 동적 할당을 기반으로 구현된 리스트 '연결리스트'


Q. 리스트란?
-> 리스트는 데이터를 순차적으로 저장하는 자료구조
-> 리스트는 중복된 데이터의 저장을 막지 않는 특성일 가진다.

--------------------------------------------------------------

리스트의 ADT

리스트 자료구조
-> 데이터를 순차적으로 저장된다는 특성을 기반으로 
    제공해야 할 기능들을 정의.

1. void ListInit(List* plist);
-> 초기화할 리스트의 주소 값을 인자로 전달한다.
-> 리스트 생성 후 제일 먼저 호출되어야 하는 함수이다.

2. void LInsert(List* plist, LData data);
-> 리스트에 데이터를 저장한다. 매개변수 data에 전달된 값을 저장한다.

3. int LFirst(List* plist, LData* pdata);
-> 첫 번째 데이터가 pdata가 가리키는 메모리에 저장된다.
-> 데이터의 참조를 위한 초기화가 진행된다.
// 참조 성공 시 TRUE(1), 실패 시 FALSE(0) 반환

4. int LNext(List* plist, LData* pdata);
-> 참조된 데이터의 다음 데이터가 pdata가 가리키는 메모리에 저장된다.
-> 순차적인 참조를 위해서 반복 호출이 가능하다.
-> 참조를 새로 시작하려면 먼저 LFirst 함수를 호출해야 한다.
// 참조 성공 시 TRUE(1), 실채 시 FALSE(0) 반환

5. LData LRemove(List* plist);
-> LFirst 또는 LNext 함수의 마지막 반환 데이터를 삭제한다.
-> 삭제된 데이터는 반환된다.
-> 마지막 반환 데이터를 삭제하므로 연이음 반복 호출을 허용하지 않는다.

6. int LCount(List* plist);
-> 리스트에 저장되어 있는 데이터의 수를 반환한다.

-----------------------------------------------------------------------------

array과 ArrayList의 차이
1) 배열은 크기가 고정되어있다.
   배열은 primitive type(int byte, char 등)과 object 모두를 담을 수 있다.
   배열은 제네릭을 사용할 수 없다.
   길이에 대해 배열은 length 변수를 쓴다
   배열은 element들을 할당하기 위해 assignment(할당) 연산자를 쓴다.

2) ArrayList는 사이즈가 동적인 배열이다.
   ArrayList는 object element만 담을 수 있다.
   ArrayList는 타입 안정성을 보장해주는 제네릭을 사용할 수 있다.
   ArrayList는 size() 메서드를 써야한다.
   ArrayList는 add() 메서드를 통해 element를 삽입한다.

-----------------------------------------------------------------------------

배열 기반 리스트의 장단점

장점
-> 데이터의 참조가 쉽다. 
-> 인덱스 값을 기준으로 어디든 한 번에 참조가 가능하다.

단점
-> 배열의 길이가 초기에 결정되어야 한다. 변경이 불가능하다.
-> 삭제의 과정에서 데이터의 이동(복사)가 매우 빈번히 일어나 비효율적이다.






