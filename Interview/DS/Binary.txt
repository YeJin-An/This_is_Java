이진 탐색(Binary Search)알고리즘 개념 이해

이진 탐색이란?
-> 데이터가 정렬돼 있는 배열에서 특정한 값을 찾아내는 알고리즘
-> 배열의 중간에 있는 임의의 값을 선택하여 
     찾고자 하는 값 X와 비교한다.
-> X가 중간값보다 크면 배열의 우측을 대상으로 다시 탐색한다.


이진 탐색 소스코드 구현 방법
-> 그렇다면 소스코드로 구현할 경우
    어떻게 배열에 접근하고 종료 조건을 판단할 수 있을까??

인덱스를 이용한다??
 : 인덱스의 최소, 최대 값을 따로 저장하여 탐색이 진행될 때 마다
   갱신하고 탐색하는 배열의 범위를 줄여나간다.

#1 반복문을 이용한 방법
int BSearch(int arr[], int target){
    int low = 0;
    int high = arr.length - 1;
    int mid;

    while(low <= high){
        mid = (low + high) / 2;
   
        if(arr[mid] == target) return mid;
        else if (arr[mid] > target) high = mid - 1;
        else low = mid + 1;
    }
    return -1;
}


#2 재귀함수를 이용한 방법
int BSearchRecursive(int arr[], int target, int low, int high){
    if(low > high) return -1;

    int mid = (low + high) / 2;
    if(arr[mid] == target)      return mid;
    else if (arr[mid] > target) return BSearchRecursive(arr, target, low, mid-1);
    else                           return BSearchRecursive(arr, target, mid+1, high);
}



0부터 n-1까지 자연수를 하나씩 증가시켜 가면서 확인해보면 구할 수 있음.
public static int squareRootLoop(int n){
    for(int i = 0; i<n; i++)
        if( i * i ==n) return i;
    return -1;
}














