[Data Structure]

리스트
-> 순서를 가진 데이터의 집합을 가리키는 추상자료형
-> 동일한 데이터를 가지고 있어도 상관 없다 (원소 중복을 허용)
-> 리스트는 ([순차 리스트] 와 [연결리스트]로 나뉜다.)
----------------------------------------------------------------------------
순차리스트(Array List)
-> 배열을 기반으로 구현된 리스트
-> 원소 물리적 저장 순서 == 원소 논리적 순서

장점
-> 데이터의 참조가 쉽다. 
    (인덱스 값을 기준으로 어디든 한번에 참조 가능)
단점
-> 배열의 길이가 초기에 결정되어야 한다.
  : 메모리 낭비나 혹은 새롭게 배열을 만들어야 하는 일이 발생할 수 있음.
-> 자료의 삽입/삭제 과정에서 데이터들의 이동(복사)가 빈번하게 일어남.
  : 원소의 갯수와 삽입/삭제가 빈번하게 일어날수록
    작업에 소요되는 시간이 증가함.
-----------------------------------------------------------------------------
연결리스트
-> 메모리의 동적할당을 기반으로 구현된 리스트
    (객체 생성, 동적 : heap)
-> 원소 논리적 순서, 삽입/삭제가 빈번한 가변적인 리스트 구현
-> 노드는 데이터를 저장할 부분과 
    한 노드에 연결될 노드의 포인터 위치를 가리키는 부분으로 구성.

1. Singly Linked List
-> 노드가 하나의 링크 필드에 의해 다음 노드와 연결되는 구조
-> 헤드가 가장 앞의 노드를 가리키고, 
    링크 필드가 연속적으로 다음 노드를 가리킨다.
-> Null을 가리키는 노드가 해당 리스트의 마지막 노드이다.

2. Doubly Linked List
-> 두개의 링크 필드(prev, next)와 한개의 데이터 필드로 구성됨.
-> 양쪽 방향으로 순회할 수 있도록 노드를 연결하였다.
-> 뒤에서 앞으로의 탐색이 가능해진다.
-> 중간삽입 때, 이전노드를 바로 찾을 수 있다.
-> 순회 연산을 줄일 수 있다.
-------------------------------------------------------------------------------















