DS_Data Structure

Graph_Expression
------------------------------------------------------------

1. 그래프의 표현
-> 그래프를 표현하는 방법은 여러가지가 있다.

대표적인 방법
1) 인접 행렬(adjacency matrix)
2) 인접 리스트(adjacency list)
3) 인접 다중 리스트(adjacency multi list)

// 이때 어떤 표현 방법을 선택하느냐 하는 것은
   수행시키려는 [연산]과 이용하려는 [응용]에 달려있다.

--------------------------------------------------------------

1) 인접 행렬(adjacency matrix)
그래프 G = (V,E)를 n >=1(n은 정점의 수)의 정점의 가진 그래프라고 했을 때,

그래프 G에 대한 인접행렬의 크기는 n * n이다.
그리고 a[n,n] 크기의 2차원 배열올 표현된다.

// 그래프와 그에 해당하는 인접행렬의 표현
-> 무방향 그래프에 인접행렬은 간선간의 특성상 대칭이 된다.
    따라서 인접행렬 표현에 필요한 공간의 크기는 n^2이지만,
             무방향 인접행렬의 경우 상위나 하위만 저장하여 공간의 절약 가능

// 인접행렬의 포현방식에서 진입 차수와 진출차수는
    { a[i,j] Є E(G)의 경우에 } 
-> i행의 합을 구하면 [진출 차수]
-> i열의 합을 구하면 [진입 차수]


2) 인접리스트(adjacency list)
-> 인접리스트로 그래프를 표현하는 방법은 
    n개의 정점을 각각에 대해 [인접한 정점]들의 리스트로 만드는 것이다.
-> 리스트의 정점(vertex)필드와 주소(link)필드로 구성하여야 한다.

-> 어떤 정점i에 대한 인접 리스트에 
정점 i와 인접한 정점들을 나타내는 [노드들을 포함]시키게 할 수 있다.

각 정점의 리스트는 헤더 노드를 가지고 있고,
리스트 헤더들은 배열을 이용하여 노드 번호를 오름 차순으로 정렬되어 있다.
// 특정 정점에 대한 인접 리스트를 빠르게 접근 할 수 있다.
// 리스트 내의 노드 순서는 그 이외에 다른 특별한 의미를 갖지 않는다.

무방향 그래츠의 경우 n개의 헤더 노드와 2e개으 리스트 노드가 필요하다
-> 포인터를 사용하지 않고 인접 리스트의 노드를
    순차적으로 묶어서 저장하는 방법도 있다. 
   [이 경우 배열 vertex[]를 사용하면] 배열의 크기는 n+2e+1이 된다.
   : 이는 link의 공간이 필요없기 때문에 공간의 사용을 줄일 수 있다.


// 정점이 4개, 간선이 5개일때 'n+2e+1'로 계산하면 배열의 크기는 15
   각 정점별 인접 리스트의 시작 위치를 나타낸다.
   n+1 ~ n+2e+1-1 자리까지는 각 정점의 인접 리스트를 담고 있다.


3) 인접 다중 리스트(adjacency multi list)
-> 무방향 인접 리스트의 표현에서 각 간선은 
    두 개의 인접 리스트를 포함하게 된다.
// 하나의 간선은 두개의 노드의 인접 리스트를 표현할 수 있습니다.
   이러한 점을 사용해서 만든 것이 [다중 리스트]입니다.
   -> 인접 리스트의 각각의 간선을 인접리스트롤 표현하는 것이다.

다중 리스트란
-> 노드들이 여러 리스트들이 공용하는 리스트를 말합니다.

-> 우선 [간선]을 표현하는 [노드 리스트]를 보시면,
    M은 마크 비트로 이 간선이 이미 검사되었는지 여부를 확인한다.
    i, j는 간선에 부속된 정점 입니다.
    i-link, j-link는 각 정점의 인접 리스트의 링크를 나타냅니다.

정점 0에 대한 인접리스트는 다음과 같이 식별하는 법은 다음과 같다.
// 위 그래프의 모든 정점의 인접 리스트를 식별하면 다음과 같습니다.
정점0 : E0 -> E1
정점1 : E0 -> E2 -> E3
정점2 : E2 -> E4
정점3 : E1 -> E3 -> E4




















