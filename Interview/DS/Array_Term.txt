DS_Data Structure

Array
------------------------------------------------------------

1. 데이터의 표현 (배열)

데이터를 표현하는 방식
1) 순차표현 -> 배열
2) 연결표현 -> 연결리스트


Q. Array이란?
-> 거의 모든 프로그래밍 언어들은 
    배열(array)를 시스템 데이터 타입으로 지원하고 있다.
-> 배열은 물리적으로 연속된 메모리 할당 방식으로 구현되어있다.
-> 연속된 메모리의 집합이라고 한다.
-> 배열의 본질은 순차적인 메모리 할당 방식에 
    인덱스와 원소의 쌍 집합으로 
    인덱스에 따라 원소의 값이 결정되는 대응 관계

<배열의 인덱스와 데이터의 맵핑>

배열의 장점
1) 데이터 접근 속도가 빠르다.
-> 배열의 데이터 접근방식은 직접 접근 방식
-> 인덱스에 따라 직접 접근할 수 잇기 때문에 빠르다.
2) 정보의 은닉 효과를 가져온다. 
-> 메모리로부터 찾아 연관된 원소값을 접근하느냐 하는 것은
   내부 구현의 문제로서 일반 사용자는 알 필요가 없다.

배열의 단점
1) 배열은 크기가 정해져 있다.
-> 프로그램 중간에 크기를 수정할 수 없음.
-> 가변 배열과 같이 길이의 수정이 가능한 경우는
    지정된 배열을 따로 생성한 후 데이터를 복사 후
    기존 배열을 삭제하기 때문에 자원낭비를 하게 된다.

<배열의 크기가 커서 메모리 공간의 낭비 발생>
<배열의 크기가 작아 데이터를 적재하지 못함>

2) 삭제와 삽입기능이 복잡하다.
-> 배열의 중간에 데이터 삭제의 경우 null값이 되어
    메모리의 낭비가 발생한다.
    따라서 인덱스위 뒤 데이터를 당겨와 체워야 하는 작업이 필요하다.
-> 삽입의 경우 나머지 데이터들은 한칸씩 뒤로 밀어줘야 한다.

<기존배열>
<인덱스 4의 데이터 삭제>
<데이터를 당겨서 null의 공백을 지운다.>
// 실재로는 데이터를 당겨올때 하나의 원소씩 당겨와야하여 
   많은 작업의 소요가 발생합니다.
   




















