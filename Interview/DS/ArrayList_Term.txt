DS_DataStructure

Array_List

----------------------------------------------------------------------------
Array(배열)
-> 여러 데이터를 하나의 이름으로 그룹핑해서 관리 하기 위한 자료구조
    index와 값의 쌍으로 구성
-> index는 값에 대한 유일무이한 식별자 (마치 주민번호)
-> 논리적 저장 순서와 물리적 저장 순서가 일치
    => index로 해당 원소에 접근 할 수 있다 0(1)
-> 연속된 메모리의 공간으로 이루어져 있다.
-> 배열은 정의와 동시에 길이를 지정하여 길이를 바꿀 수 없다.

장점
-> 인덱스를 통한 검색이 용이함.
-> 연속적이므로 메모리 관리가 편하다.

단점
-> 크기가 고정되어 있어 어떤 엘리먼트가 삭제되면,
    삭제된 상태를 빈 공간으로 남겨두어야 한다. => 메모리 낭비
-> 정적이므로 배열의 크기를 컴파일 이전에 정해주어야 한다.
-> 컴파일 이후 배열의 크기르 변동 할 수 없다.

--------------------------------------------------------------------------
List(리스트)
-> 순서가 있는 엘리먼트의 모임으로 배열과 다르게 
    빈 엘리먼트는 절대 허용하지 않는다.
-> 배열이 가지고 있는 인덱스라는 장점을 버리고
    "빈틈없는 데이터의 적재"라는 장점을 취함.
-> 리스트에서 인덱스는 몇 번째 데이터인가 정도(순서)
    의 의미를 가진다 (Array에서의 인덱스는 값에 대한 유일무이한 식별자)

-> 빈 엘리먼트는 허용하지 않는다.
-> 순차성을 보장하지 못하기 때문에 
    spacial locality보장이 되지 않아서 cash hit가 어렵다.
    (데이터 갯수가 확실하고, 자주 사용되면 array가 더 효율적)
-> 불연속적으로 메모리 공간을 차지
-> 포인터를 통한 접근

장점
-> 포인터를 통해 다음 데이터위 위치를 가르켜 [삽입 삭제의 용이]
-> 동적이므로 크기가 정해져 잇지 않음
-> 메모리의 재사용 편리
-> 분연속적이므로 메모리 관리의 편리

단점
-> 검색 성능이 좋지 않음.
-> 포인터를 통해 다음 데이터를 가르켜 [추가적인 메모리 공간 발생].

-------------------------------------------------------------------------

          추가/삭제   |   조회
-------------------------------
Array |     느림      |   빠름
List   |      빠름     |   느림















