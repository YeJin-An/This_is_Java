DS_Data Structure

Tree & Heap
------------------------------------------------------------
Tree(트리)
 :  비선형 구조 -> 1:n 관계를 가지는 자료구조
 :     다 : 다    -> 그래프, 1:다 + 계층 -> 트리
 : 상위 입장에서는 하위가 여러개이지만, 
   하위 입장에서는 상대가 하나면 트리를 쓸 수있다.
 : 리스트에서는 head를 가지고 있으면, 리스트 전체를 가지고 있는 것과 같음.
   트리에서는 노드가 그 역할을 한다.
 : 노드가 n개인 트리는 항상 n-1개의 간선(edge)를 가진다.      

[용어]
Root Node
Leaf Node(단말 노드)
-> 차수가 0인 노드, 즉 자식 노드가 없는 노드
Sibling Node
-> 같은 부모 노드의 자식 노드들
Parent Node
Child Node

조상 노드
-> 간선을 따라 루트 노드까지 이르는 경로에 있는 모든 노드들
자손 노드
-> 서브 트리에 있는 하위 레벨의 노드들
간선(edge)
-> 노드를 연결하는 선
서브 트리
-> 부모 노드와 연결된 간선을 끊었을 대 생성되는 트리
-------------------------------------------------------------

이진트리(Binary Tree)
-> 모든 노드들이 2개의 서브트리를 갖는 특별한 형태의 트리.
    각 노드가 자식노드를 최대한 2개까지만 가질 수 있다.

이진 탐색 트리(Binary Search Tree)
-> 모든 부모 노드들의 left child는 부모 노드의 데이터보다 값이 
    작아야하고,
    right child는 부모노드의 값보다 커야한다.
// 중위순회(Inorder Travel)을 적용하면 오름차순 정렬이 된다.

정 이진 트리(Full Binary Tree)
-> 자식 노드가 아예 없거나, 최대 둘뿐인 tree
-> 자식을 하나만 가진 노드가 없어야 한다.
-> Perfect Binary Tree의 하위 종류이다

포화 이진 트리(Perfect Binary Tree)
-> 모든 노드가 0개 혹은 2개의 자식노드를 가지며 
    모든 LeafNode가 똑같은 레벨에 있다.
    완벽한 피라미드 모양

완전 이진 트리 (Complete Binary Tree)
-> 마지막 레벨을 제외한 모든 노드에 노드가 채워져 있어야 하고,
    마지막 레벨은 왼쪽으로 부터 채워져 있어야 하고 남겨도 됨.

편향 이진 트리(Skewed Binary Tree)
-> 노드들이 한 방향으로 편향된 트리이다.

-----------------------------------------------------------------------

힙(Heap)
-> 완전 이진 트리의 일종,
    우선순위 큐를 위해 만들어진 자료구조.
-> 사용자의 동적할당(힙)을 이용하여 우선순위 큐를 구현하면
    데이터 삽입, 삭제하는 데, longn의 시간이 걸린다.

힙(Heap)의 종류
-> 최대 힙(max heap)
    : 부모 노드의 키값 >= 자식노드의 키값.
-> 최소 힙(min heap)
    : 부모 노드의 키값 <= 자식노드의 키값.

특징
-> 최대값과 최소값을 O(1)의 속도로 구할 수 있다.
-> 배열을 이용하여 구현한다.
-> 구현을 쉽게 하기 위해서 인덱스 1부터 시작한다.
-> 인덱스


데이터 삽입
1) max heap일 경우
-> 데이터를 일단 맨 마지막 인덱스에 추가한다.
-> 부모 노드와 비교하여 부모 노드보다 작다면 그대로 두고
-> 부모 노드보다 크다면, 부모 노드와 위치를 바꿔준다.

데이터 삭제
1) max heap일 경우
-> root 노드를 삭제한다.
-> root 노드의 자리에 맨 마지막 노드를 가져온다.
-> heap을 재구성한다.
    (만약 자식 노드보다 크다면 그대로 두고, 
     작다면 자식노드와 값을 바꾼다.)




















