소프트웨어 공학_모듈화, 결합도, 응집도
-> OOP의 SOLID "커플링, 디커플링"

모듈화(Modularity)
1. 정의
-> 소프트웨어를 각 기능별로 분할, 설계 및 구현기법
2. 특징
-> 소프트웨어의 복잡도 감소 & 성능 향상
-> 효과적인 유지보수 (추상화, 캡술화)
-> 모율의 독립성
-> 적정한 모듈의 수 유지가 관건

모듈의 수가 증가되면 될수록
1. 인터페이스 노력이 증가
2. 프로그램 비용/노력이 줄어들고
// 인터페이스와 프로그램 비용/노력의 
   중간인 '최소비용영역'이 존재


결합도(Coupling)
1. 정의
-> 어떤 모듈이 다른 모듈에 의존하는 정도를 측정
-> 독립적인 모듈이 되기 위해 결합도가 약해야 하다.

2. 결합도 순서( 약함 -> 강함 )
2-1. 자료 : 단순자료만 매개변수로 전달 & 참조
2-2. 스탬프 : 자료구조(배열, 리스트, 레코드, 객체 등)를 매개변수로 전달 & 참조
2-3. 제어 : 논리적 흐름을 제어하기 위한 제어 플래스(flag)나 정보를 전달
2-4. 외부 : 외부 환경(특수H/W, 통신 프로토콜, os, 플래그(flag)나 정보를 전달
2-5. 공통 : 두 모듈이 같은 글로벌 데이터(전역변수)를 공유하는 경우
2-6. 내용 : 한 모듈이 다른 모듈의 내부 기능 및 자료를 직접 참조하는 경우



응집도(Cohesion)
1. 정의
-> 하나의 모듈이 하나의 기능을 수행하는데, 다른 요소들간에 연관이 되는 척도
-> 독립적인 모듈이 되기 위해서는 응집도가 강해야 한다.

2. 응집도 순서 ( 강함 -> 약함 )
2-1. 기능적 : 모듈 내 모든 요소들이 단일 기능을 수행
2-2. 순차적 : 모듈 내의 한 요소의 출력 자료가 다음 요소의 입력 자료로 사용
2-3. 교환적 : 모듈 내의 요소들이 동일한 입출력 자료로 서로 다른 기능을 수행
2-4. 절차적 : 모듈 수행 요소들이 반드시 특정 순서대로 수행
2-5. 시작적(일시적) : 특정 시간에 실행되는 기능들을 모아 작성된 모듈
2-6. 논리적 : 논리적으로 유사한 기능을 수행 하지만 서로의 관계는 밀접하지 않음
2-7. 우연적 : 모듈 내 요소들이 뚜렷한 관계가 없이 존재











