CS_Computer Architecture

패리티 비트 & 해밍 코드

----------------------------------------------------------------------------

1. 패리티 비트
 : 정보 전달 과정에서 오류가 생겼는지 검사하기 위해 추가하는 비트
 : 전송하고자 하는 데이터의 각 문자에 1비트를 더하여 전송한다.

종류 : 짝수, 홀수
-> 전체 비트에서 (짝수, 홀수)에 맞도록 비트를 정하는 것.

Q. 짝수 패리티일 때 7비트 데이터가 1010001라면?
A. 1을 짝수로 만들어주기 위해 "1"를 더한다 
    [11010001] __ 맨앞이 패리티비트

----------------------------------------------------------------------------

2. 해밍 코드
 : 데이터 전송시 1비트의 에러를 정정할 수 있는 자기 오류정정 코드
 : 패리티비트를 보도 1비트에 대한 오류를 정정할 곳을 찾아 수정 가능
   __ 패리티 비트는 오류를 검출하기만 할 뿐 수정하지 않아 "해밍코드"를 활용


방법
1) 2의 n승 번째 자리인 1,2,4번째 자릿수가 패리티 비트라는 것으로 부터 시작한다.
2) 1)의 숫자로 부터 패리티비트("1")이 짝수 인지 홀수 인지 구분하도록 판별을 한다.

--------------------------------------------------------------------------------


What is Hamming Code?

Hamming Code
 : 컴퓨터 스스로가 수신 데이터의 오류를 검출 및 수정이 가능한 [오류 수정 코드]

오류 수정 코드란?
 : 몇 가지 검사 조건에 부합하도록 만든 부호
 : 여러 조건을 검사함으로써
 -> 수신 비트의 오류 유무 여부 뿐 아니라 오류 발생할 곳까지 찾아내 
      정정할 수 있도록 하는 코드
// Hamming Code가 이 오류 수정 코드의 대표적인 예이다.


송신 측에서 송신한 데이터를 수신 측에서 수신한다.

데이터 전송 과정에서 모든 데이터가 정확하기 전송된다는 보장은 없다.
따라서 Parity Check라는 방법을 이용해 데이터를 송신한다.

Parity Check 
-> 2진 비트열에 더해지는 에러 검출용 비트(Error Detecting Code, 에러 검출 부호)
-> "1"의 갯수를 세어 홀짝에 대래 비트열 뒤에 더해서 전송하는 기법

실제로 통신에 많이 사용하는 ASCII라는 표준 코드 체계에서도
7비트의 데이터 비트와 1비트의 패리티 비트를 표함하여 8비트를 전송용 코드로 사용한다.

패리티비트는 오류를 검출할 순 없고, 에로를 검출만 할 분, 교정은 불가능하다.

오류를 수정하기 위해 재전송을 요구하는 수신 측과 송신 측이 거리가 많이 떨어져 있을 때,
데이터의 전송 신뢰도에 문제가 되어 
에러를 직접 검출해서 컴퓨터가 오류를 정정할 수 있도록 만든 코드가
해밍 코드(Hamming Code)이다

https://m.blog.naver.com/PostList.naver?blogId=supergrammer&categoryNo=8



















